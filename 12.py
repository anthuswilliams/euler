# PROBLEM: The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:
# 
# 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
# 
# Let us list the factors of the first seven triangle numbers:
# 
#  1: 1
#  3: 1,3
#  6: 1,2,3,6
# 10: 1,2,5,10
# 15: 1,3,5,15
# 21: 1,3,7,21
# 28: 1,2,4,7,14,28
# We can see that 28 is the first triangle number to have over five divisors.
# 
# What is the value of the first triangle number to have over five hundred divisors?
#
# SOLUTION: Gauss proved (or at least is said to have proved) that the sum of the numbers 1 ... n is (n +n^2)/2
#
# Now , suppose a divides (n + n^2)/2. Then 2ab = n + n^2 for some b, and so the figure on the right has as many divisors
# as there are solutions to this equation
memoize = {} #store the number of divisors

#use a sieve?
def how_many_solutions(n):
    num = 2 # n is divisible by 1 and n
    for a in range(2,n):
        if n % a == 0:
            num += 1
    return num

def triangle_sum(n):
    return (n + n**2)/2

if __name__ == "__main__":
    i = 3
    while True:
        r = how_many_solutions(triangle_sum(i))
        if r > 500:
            print i, (i + i**2)/2, r
            break
        i += 1
